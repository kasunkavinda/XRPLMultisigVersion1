"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifySignature = exports.secp256k1_p1363ToFullyCanonicalDerSignature = exports.encodeTransaction = exports.hash = exports.compressPubKey = exports.deriveAddress = exports.isValidMnemnic = exports.isValidSeed = exports.isValidClassicAddress = exports.isValidAddress = exports.getAlgorithmFromKey = exports.bufferToHext = exports.hexToBytes = exports.bytesToHex = void 0;
var bn_js_1 = __importDefault(require("bn.js"));
var AddressCodec = __importStar(require("ripple-address-codec"));
var bip39_1 = require("bip39");
var elliptic = __importStar(require("elliptic"));
var ripple_keypairs_1 = require("ripple-keypairs");
Object.defineProperty(exports, "verifySignature", { enumerable: true, get: function () { return ripple_keypairs_1.verify; } });
var assert_1 = __importDefault(require("assert"));
var hash_js_1 = __importDefault(require("hash.js"));
var ripple_binary_codec_1 = require("ripple-binary-codec");
// Ugly, but no definitions when directly loading the lib file, and Signature() not exported in lib
var Signature = require("elliptic/lib/elliptic/ec/signature");
function bytesToHex(a) {
    return a
        .map(function (byteValue) {
        var hex = byteValue.toString(16).toUpperCase();
        return hex.length > 1 ? hex : "0" + hex;
    })
        .join("");
}
exports.bytesToHex = bytesToHex;
function deriveAddressWithEdPrefixer(publicKey) {
    assert_1.default(typeof publicKey === "string", "PubKey: not hex string");
    assert_1.default(publicKey.length === 64 || publicKey.length === 66, "PubKey: invalid length");
    assert_1.default(publicKey.match(/^[a-fA-F0-9]{64,66}$/), "PubKey: invalid characters (non HEX)");
    var pubKey = publicKey.length === 64 &&
        getAlgorithmFromKey("ED" + publicKey) === "ed25519"
        ? "ED" + publicKey
        : publicKey;
    return ripple_keypairs_1.deriveAddress(pubKey);
}
exports.deriveAddress = deriveAddressWithEdPrefixer;
function hexToBytes(a) {
    return new bn_js_1.default(a, 16).toArray(undefined, a.length / 2);
}
exports.hexToBytes = hexToBytes;
function bufferToHext(buffer) {
    return buffer.toString("hex").toUpperCase();
}
exports.bufferToHext = bufferToHext;
function getAlgorithmFromKey(key) {
    var bytes = hexToBytes(key);
    return bytes.length === 33 && bytes[0] === 0xed ? "ed25519" : "secp256k1";
}
exports.getAlgorithmFromKey = getAlgorithmFromKey;
function isValidClassicAddress(address) {
    return AddressCodec.isValidClassicAddress(address);
}
exports.isValidClassicAddress = isValidClassicAddress;
function isValidAddress(address) {
    return isValidClassicAddress(address);
}
exports.isValidAddress = isValidAddress;
function isValidSeed(seed) {
    try {
        return !!AddressCodec.decodeSeed(seed);
    }
    catch (e) {
        return false;
    }
}
exports.isValidSeed = isValidSeed;
function isValidMnemnic(words) {
    try {
        return !!bip39_1.validateMnemonic(words);
    }
    catch (e) {
        return false;
    }
}
exports.isValidMnemnic = isValidMnemnic;
function compressPubKey(pubkey) {
    assert_1.default(typeof pubkey === "string", "Uncompressed PubKey: not hex string");
    if (pubkey.length === 64) {
        // ed25519
        var edPubKey = "ED" + pubkey;
        assert_1.default(getAlgorithmFromKey(edPubKey) === "ed25519", "Key length ed25519, algo not ed25519");
        return edPubKey;
    }
    else if (pubkey.length === 66) {
        // Already compressed
        return pubkey;
    }
    else {
        // secp256k1
        assert_1.default(pubkey.length === 130, "Uncompressed pubkey: not 1+32+32 length");
    }
    // @ts-ignore
    var c = elliptic.curves.secp256k1.curve;
    var p = c.point(pubkey.slice(2, 66), pubkey.slice(66));
    var compressedPubKey = p.encodeCompressed("hex").toUpperCase();
    var algo = getAlgorithmFromKey(compressedPubKey);
    assert_1.default(algo === "secp256k1", "Unsupported curve: " + algo);
    return compressedPubKey;
}
exports.compressPubKey = compressPubKey;
function hash(hex) {
    return hash_js_1.default.sha512().update(hexToBytes(hex)).digest().slice(0, 32);
}
exports.hash = hash;
function encodeTransaction(TxJson, MultiSignAccount) {
    var Transaction = Object.assign({}, TxJson);
    if (typeof MultiSignAccount !== "undefined") {
        Object.assign(Transaction, { SigningPubKey: "" });
        return ripple_binary_codec_1.encodeForMultisigning(Transaction, MultiSignAccount);
    }
    else if (typeof Transaction.TxnSignature === "undefined" &&
        typeof Transaction.Signers === "undefined") {
        // Regular TX signing
        return ripple_binary_codec_1.encodeForSigning(Transaction);
    }
    else {
        // Signed TX (tx_blob)
        return ripple_binary_codec_1.encode(Transaction);
    }
}
exports.encodeTransaction = encodeTransaction;
function secp256k1_p1363ToFullyCanonicalDerSignature(p1363Signature) {
    var rs = {
        n: "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141",
        r: p1363Signature.slice(0, 64),
        s: p1363Signature.slice(64),
    };
    var bn = {
        n: new bn_js_1.default(rs.n, 16),
        s: new bn_js_1.default(rs.s, 16),
    };
    var nMinusS = bn.n.sub(bn.s);
    rs.s = (nMinusS.lt(bn.s) ? nMinusS : bn.s).toString(16).toUpperCase();
    var nonCanonicalDer = new Signature(rs).toDER();
    return Buffer.from(nonCanonicalDer).toString("hex").toUpperCase();
}
exports.secp256k1_p1363ToFullyCanonicalDerSignature = secp256k1_p1363ToFullyCanonicalDerSignature;
